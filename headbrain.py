# -*- coding: utf-8 -*-
"""headbrain.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15NwGjvVdT1vNJOQcXCJVSOsaxQBTfNEr
"""

import os
from google.colab import drive
drive.mount('/content/drive/')

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] =(20.0,10.0)

mydata=pd.read_csv('/content/drive/My Drive/csv/headbrain.csv')
print(mydata.shape)
mydata.head()

x=mydata['Head Size(cm^3)'].values
y=mydata['Brain Weight(grams)'].values
plt.title("Head Size vs Brain weight")
plt.xlabel("Head Size in cm^3")
plt.ylabel("Brain weight in gms")
plt.scatter(x,y,c="#ef5423",label='Scatter Plot')

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

m=len(x)
oneDx=x.reshape((m,1))

reg = LinearRegression()

reg=reg.fit(oneDx,y)

y_predict = reg.predict(oneDx)
print(y_predict)

print("Coefficent M= ",reg.coef_)
print("intercept C= ",reg.intercept_)

r2_score = reg.score(oneDx,y)
print(1-r2_score)

sns.countplot(x='Gender',data=mydata)

sns.countplot(data=mydata)

sns.countplot(x='Gender', hue='Age Range', data=mydata)
plt.rcParams['figure.figsize']=(20.0,10.0)

mydata['Head Size(cm^3)'].plot.hist()

mydata['Brain Weight(grams)'].plot.hist()

mydata.info()

mydata.isnull().sum()

sns.heatmap(mydata.isnull(),yticklabels=False)

pd.get_dummies(mydata['Age Range'])

agerange = pd.get_dummies(mydata['Age Range'])
agerange.head()

agerange = pd.get_dummies(mydata['Age Range'],drop_first=True)
agerange

mydata=pd.concat([mydata,agerange],axis=1)
mydata

mydata.drop(['Age Range'],axis=1,inplace=True)
mydata

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix,accuracy_score
from sklearn.preprocessing import StandardScaler

x = mydata.drop('Gender',axis=1)
y = mydata['Gender']
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1,random_state=1)
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)
logmodel = LogisticRegression()
logmodel.fit(x_train,y_train)

predictions = logmodel.predict(x_test)
print('Classification Report')
print(classification_report(y_test,predictions))
print('Confusion Matrix')
print(confusion_matrix(y_test,predictions))
print('\n Accuracy Report')
print(accuracy_score(y_test,predictions))